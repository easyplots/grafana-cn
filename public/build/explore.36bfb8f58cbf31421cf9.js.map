{"version":3,"file":"explore.36bfb8f58cbf31421cf9.js","sources":["webpack:///webpack:///./public/app/core/components/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack:///webpack:///./public/app/core/utils/reselect.ts","webpack:///webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///webpack:///./public/app/features/explore/Error.tsx","webpack:///webpack:///./public/app/features/explore/ErrorBoundary.tsx","webpack:///webpack:///./public/app/features/explore/Explore.tsx","webpack:///webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///webpack:///./public/app/features/explore/Graph.tsx","webpack:///webpack:///./public/app/features/explore/GraphContainer.tsx","webpack:///webpack:///./public/app/features/explore/Legend.tsx","webpack:///webpack:///./public/app/features/explore/LogLabel.tsx","webpack:///webpack:///./public/app/features/explore/LogLabelStats.tsx","webpack:///webpack:///./public/app/features/explore/LogLabels.tsx","webpack:///webpack:///./public/app/features/explore/LogMessageAnsi.tsx","webpack:///webpack:///./public/app/features/explore/LogRow.tsx","webpack:///webpack:///./public/app/features/explore/Logs.tsx","webpack:///webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///webpack:///./public/app/features/explore/Panel.tsx","webpack:///webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///webpack:///./public/app/features/explore/QueryTransactionStatus.tsx","webpack:///webpack:///./public/app/features/explore/Table.tsx","webpack:///webpack:///./public/app/features/explore/TableContainer.tsx","webpack:///webpack:///./public/app/features/explore/TimePicker.tsx","webpack:///webpack:///./public/app/features/explore/Wrapper.tsx","webpack:///webpack:///./public/app/features/explore/state/actions.ts","webpack:///webpack:///./public/app/features/explore/state/selectors.ts","webpack:///webpack:///./public/app/features/explore/utils/set.ts"],"sourcesContent":["import React, { FC, ReactNode, PureComponent } from 'react';\nimport { Tooltip } from '@grafana/ui';\n\ninterface ToggleButtonGroupProps {\n  label?: string;\n  children: JSX.Element[];\n  transparent?: boolean;\n}\n\nexport default class ToggleButtonGroup extends PureComponent<ToggleButtonGroupProps> {\n  render() {\n    const { children, label, transparent } = this.props;\n\n    return (\n      <div className=\"gf-form\">\n        {label && <label className={`gf-form-label ${transparent ? 'gf-form-label--transparent' : ''}`}>{label}</label>}\n        <div className={`toggle-button-group ${transparent ? 'toggle-button-group--transparent' : ''}`}>{children}</div>\n      </div>\n    );\n  }\n}\n\ninterface ToggleButtonProps {\n  onChange?: (value) => void;\n  selected?: boolean;\n  value: any;\n  className?: string;\n  children: ReactNode;\n  tooltip?: string;\n}\n\nexport const ToggleButton: FC<ToggleButtonProps> = ({\n  children,\n  selected,\n  className = '',\n  value = null,\n  tooltip,\n  onChange,\n}) => {\n  const onClick = event => {\n    event.stopPropagation();\n    if (onChange) {\n      onChange(value);\n    }\n  };\n\n  const btnClassName = `btn ${className} ${selected ? 'active' : ''}`;\n  const button = (\n    <button className={btnClassName} onClick={onClick}>\n      <span>{children}</span>\n    </button>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip content={tooltip} placement=\"bottom\">\n        {button}\n      </Tooltip>\n    );\n  } else {\n    return button;\n  }\n};\n","import { memoize } from 'lodash';\nimport { createSelectorCreator } from 'reselect';\n\nconst hashFn = (...args) => args.reduce((acc, val) => acc + '-' + JSON.stringify(val), '');\nexport const createLodashMemoizedSelector = createSelectorCreator(memoize, hashFn);\n","import React, { PureComponent } from 'react';\n\nconst INTERVAL = 150;\n\nexport default class ElapsedTime extends PureComponent<any, any> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time } = this.props;\n    const value = (time || elapsed) / 1000;\n    return <span className={`elapsed-time ${className}`}>{value.toFixed(1)}s</span>;\n  }\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  message: any;\n  button?: {\n    text: string;\n    onClick: (event: React.MouseEvent) => void;\n  };\n}\n\nexport const Alert: FC<Props> = props => {\n  const { message, button } = props;\n  return (\n    <div className=\"alert-container\">\n      <div className=\"alert-error alert\">\n        <div className=\"alert-icon\">\n          <i className=\"fa fa-exclamation-triangle\" />\n        </div>\n        <div className=\"alert-body\">\n          <div className=\"alert-title\">{message}</div>\n        </div>\n        {button && (\n          <div className=\"alert-button\">\n            <button className=\"btn btn-outline-danger\" onClick={button.onClick}>\n              {button.text}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component<{}, any> {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div className=\"explore-container\">\n          <h3>An unexpected error happened.</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n","// Libraries\nimport React, { ComponentClass } from 'react';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n// @ts-ignore\nimport _ from 'lodash';\nimport { AutoSizer } from 'react-virtualized';\n\n// Services & Utils\nimport store from 'app/core/store';\n\n// Components\nimport { Alert } from './Error';\nimport ErrorBoundary from './ErrorBoundary';\nimport GraphContainer from './GraphContainer';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\nimport TimePicker, { parseTime } from './TimePicker';\n\n// Actions\nimport {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  setQueries,\n  refreshExplore,\n  reconnectDatasource,\n} from './state/actions';\n\n// Types\nimport { RawTimeRange, TimeRange, DataQuery, ExploreStartPageProps, ExploreDataSourceApi } from '@grafana/ui';\nimport { ExploreItemState, ExploreUrlState, RangeScanner, ExploreId, ExploreUpdateState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport { LAST_USED_DATASOURCE_KEY, ensureQueries, DEFAULT_RANGE, DEFAULT_UI_STATE } from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { scanStopAction } from './state/actionTypes';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\n\ninterface ExploreProps {\n  StartPage?: ComponentClass<ExploreStartPageProps>;\n  changeSize: typeof changeSize;\n  changeTime: typeof changeTime;\n  datasourceError: string;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceLoading: boolean | null;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  range: RawTimeRange;\n  update: ExploreUpdateState;\n  reconnectDatasource: typeof reconnectDatasource;\n  refreshExplore: typeof refreshExplore;\n  scanner?: RangeScanner;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  showingStartPage?: boolean;\n  supportsGraph: boolean | null;\n  supportsLogs: boolean | null;\n  supportsTable: boolean | null;\n  queryKeys: string[];\n  urlState: ExploreUrlState;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n  /**\n   * Timepicker to control scanning\n   */\n  timepickerRef: React.RefObject<TimePicker>;\n\n  constructor(props: ExploreProps) {\n    super(props);\n    this.exploreEvents = new Emitter();\n    this.timepickerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { exploreId, urlState, initialized } = this.props;\n    const { datasource, queries, range = DEFAULT_RANGE, ui = DEFAULT_UI_STATE } = (urlState || {}) as ExploreUrlState;\n    const initialDatasource = datasource || store.get(LAST_USED_DATASOURCE_KEY);\n    const initialQueries: DataQuery[] = ensureQueries(queries);\n    const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n    const width = this.el ? this.el.offsetWidth : 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents,\n        ui\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  componentDidUpdate(prevProps: ExploreProps) {\n    this.refreshExplore();\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  onChangeTime = (range: TimeRange, changedByScanner?: boolean) => {\n    if (this.props.scanning && !changedByScanner) {\n      this.onStopScanning();\n    }\n    this.props.changeTime(this.props.exploreId, range);\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) => datasourceInstance.modifyQuery(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, index, modifier);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    const scanner = this.scanPreviousRange;\n    this.props.scanStart(this.props.exploreId, scanner);\n  };\n\n  scanPreviousRange = (): RawTimeRange => {\n    // Calling move() on the timepicker will trigger this.onChangeTime()\n    return this.timepickerRef.current.move(-1, true);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  refreshExplore = () => {\n    const { exploreId, update } = this.props;\n\n    if (update.queries || update.ui || update.range || update.datasource) {\n      this.props.refreshExplore(exploreId);\n    }\n  };\n\n  renderEmptyState = () => {\n    return (\n      <div className=\"explore-container\">\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  };\n\n  onReconnect = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { exploreId, reconnectDatasource } = this.props;\n\n    event.preventDefault();\n    reconnectDatasource(exploreId);\n  };\n\n  render() {\n    const {\n      StartPage,\n      datasourceInstance,\n      datasourceError,\n      datasourceLoading,\n      datasourceMissing,\n      exploreId,\n      showingStartPage,\n      split,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      queryKeys,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} timepickerRef={this.timepickerRef} onChangeTime={this.onChangeTime} />\n        {datasourceLoading ? <div className=\"explore-container\">Loading datasource...</div> : null}\n        {datasourceMissing ? this.renderEmptyState() : null}\n\n        <FadeIn duration={datasourceError ? 150 : 5} in={datasourceError ? true : false}>\n          <div className=\"explore-container\">\n            <Alert\n              message={`Error connecting to datasource: ${datasourceError}`}\n              button={{ text: 'Reconnect', onClick: this.onReconnect }}\n            />\n          </div>\n        </FadeIn>\n\n        {datasourceInstance && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className=\"m-t-2\" style={{ width }}>\n                    <ErrorBoundary>\n                      {showingStartPage && <StartPage onClickExample={this.onClickExample} />}\n                      {!showingStartPage && (\n                        <>\n                          {supportsGraph && !supportsLogs && <GraphContainer width={width} exploreId={exploreId} />}\n                          {supportsTable && <TableContainer exploreId={exploreId} onClickCell={this.onClickLabel} />}\n                          {supportsLogs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              onChangeTime={this.onChangeTime}\n                              onClickLabel={this.onClickLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundary>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    urlState,\n    update,\n  } = item;\n  return {\n    StartPage,\n    datasourceError,\n    datasourceInstance,\n    datasourceLoading,\n    datasourceMissing,\n    initialized,\n    range,\n    showingStartPage,\n    split,\n    supportsGraph,\n    supportsLogs,\n    supportsTable,\n    queryKeys,\n    urlState,\n    update,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeTime,\n  initializeExplore,\n  modifyQueries,\n  reconnectDatasource,\n  refreshExplore,\n  scanStart,\n  scanStopAction,\n  setQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Explore)\n);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { ExploreId } from 'app/types/explore';\nimport { DataSourceSelectItem, RawTimeRange, TimeRange } from '@grafana/ui';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport { changeDatasource, clearQueries, splitClose, runQueries, splitOpen } from './state/actions';\nimport TimePicker from './TimePicker';\nimport { ClickOutsideWrapper } from 'app/core/components/ClickOutsideWrapper/ClickOutsideWrapper';\n\nenum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\nconst createResponsiveButton = (options: {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n}) => {\n  const defaultOptions = {\n    iconSide: IconSide.left,\n  };\n  const props = { ...options, defaultOptions };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide } = props;\n\n  return (\n    <button className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`} onClick={onClick}>\n      {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName} icon-margin-right`} /> : null}\n      <span className=\"btn-title\">{!splitted ? title : ''}</span>\n      {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName} icon-margin-left`} /> : null}\n    </button>\n  );\n};\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  timepickerRef: React.RefObject<TimePicker>;\n  onChangeTime: (range: TimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  exploreDatasources: DataSourceSelectItem[];\n  loading: boolean;\n  range: RawTimeRange;\n  selectedDatasource: DataSourceSelectItem;\n  splitted: boolean;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQuery: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props, {}> {\n  constructor(props) {\n    super(props);\n  }\n\n  onChangeDatasource = async option => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    this.props.runQuery(this.props.exploreId);\n  };\n\n  onCloseTimePicker = () => {\n    this.props.timepickerRef.current.setState({ isOpen: false });\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      exploreDatasources,\n      exploreId,\n      loading,\n      range,\n      selectedDatasource,\n      splitted,\n      timepickerRef,\n    } = this.props;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {splitted && (\n              <a className=\"explore-toolbar-header-close\" onClick={() => this.props.closeSplit(exploreId)}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div className=\"datasource-picker\">\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={exploreDatasources}\n                    current={selectedDatasource}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item\">\n                {createResponsiveButton({\n                  splitted,\n                  title: 'Split',\n                  onClick: this.props.split,\n                  iconClassName: 'fa fa-fw fa-columns icon-margin-right',\n                  iconSide: IconSide.left,\n                })}\n              </div>\n            ) : null}\n            <div className=\"explore-toolbar-content-item timepicker\">\n              <ClickOutsideWrapper onClick={this.onCloseTimePicker}>\n                <TimePicker ref={timepickerRef} range={range} onChangeTime={this.props.onChangeTime} />\n              </ClickOutsideWrapper>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              <button className=\"btn navbar-button navbar-button--no-icon\" onClick={this.onClearAll}>\n                Clear All\n              </button>\n            </div>\n            <div className=\"explore-toolbar-content-item\">\n              {createResponsiveButton({\n                splitted,\n                title: 'Run Query',\n                onClick: this.onRunQuery,\n                buttonClassName: 'navbar-button--secondary',\n                iconClassName: loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-level-down fa-fw run-icon',\n                iconSide: IconSide.right,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const exploreItem = state.explore[exploreId];\n  const { datasourceInstance, datasourceMissing, exploreDatasources, queryTransactions, range } = exploreItem;\n  const selectedDatasource = datasourceInstance\n    ? exploreDatasources.find(datasource => datasource.name === datasourceInstance.name)\n    : undefined;\n  const loading = queryTransactions.some(qt => !qt.done);\n\n  return {\n    datasourceMissing,\n    exploreDatasources,\n    loading,\n    range,\n    selectedDatasource,\n    splitted,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  clearAll: clearQueries,\n  runQuery: runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n};\n\nexport const ExploreToolbar = hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(UnConnectedExploreToolbar)\n);\n","import $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.stack';\n\nimport { RawTimeRange } from '@grafana/ui';\nimport * as dateMath from 'app/core/utils/datemath';\nimport TimeSeries from 'app/core/time_series2';\n\nimport Legend from './Legend';\nimport { equal, intersect } from './utils/set';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\n// Copied from graph.ts\nfunction time_format(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return '%H:%M:%S';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return '%H:%M';\n    }\n    if (secPerTick <= 80000) {\n      return '%m/%d %H:%M';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return '%m/%d';\n    }\n    return '%Y-%m';\n  }\n\n  return '%H:%M';\n}\n\nconst FLOT_OPTIONS = {\n  legend: {\n    show: false,\n  },\n  series: {\n    lines: {\n      linewidth: 1,\n      zero: false,\n    },\n    shadowSize: 0,\n  },\n  grid: {\n    minBorderMargin: 0,\n    markings: [],\n    backgroundColor: null,\n    borderWidth: 0,\n    // hoverable: true,\n    clickable: true,\n    color: '#a1a1a1',\n    margin: { left: 0, right: 0 },\n    labelMarginX: 0,\n  },\n  selection: {\n    mode: 'x',\n    color: '#666',\n  },\n  // crosshair: {\n  //   mode: 'x',\n  // },\n};\n\ninterface GraphProps {\n  data: any[];\n  height?: number;\n  width?: number;\n  id?: string;\n  range: RawTimeRange;\n  split?: boolean;\n  userOptions?: any;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onToggleSeries?: (alias: string, hiddenSeries: Set<string>) => void;\n}\n\ninterface GraphState {\n  /**\n   * Type parameter refers to the `alias` property of a `TimeSeries`.\n   * Consequently, all series sharing the same alias will share visibility state.\n   */\n  hiddenSeries: Set<string>;\n  showAllTimeSeries: boolean;\n}\n\nexport class Graph extends PureComponent<GraphProps, GraphState> {\n  $el: any;\n  dynamicOptions = null;\n\n  state = {\n    hiddenSeries: new Set(),\n    showAllTimeSeries: false,\n  };\n\n  getGraphData() {\n    const { data } = this.props;\n\n    return this.state.showAllTimeSeries ? data : data.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  }\n\n  componentDidMount() {\n    this.draw();\n    this.$el = $(`#${this.props.id}`);\n    this.$el.bind('plotselected', this.onPlotSelected);\n  }\n\n  componentDidUpdate(prevProps: GraphProps, prevState: GraphState) {\n    if (\n      prevProps.data !== this.props.data ||\n      prevProps.range !== this.props.range ||\n      prevProps.split !== this.props.split ||\n      prevProps.height !== this.props.height ||\n      prevProps.width !== this.props.width ||\n      !equal(prevState.hiddenSeries, this.state.hiddenSeries)\n    ) {\n      this.draw();\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.unbind('plotselected', this.onPlotSelected);\n  }\n\n  onPlotSelected = (event, ranges) => {\n    if (this.props.onChangeTime) {\n      const range = {\n        from: moment(ranges.xaxis.from),\n        to: moment(ranges.xaxis.to),\n      };\n      this.props.onChangeTime(range);\n    }\n  };\n\n  getDynamicOptions() {\n    const { range, width } = this.props;\n    const ticks = (width || 0) / 100;\n    let { from, to } = range;\n    if (!moment.isMoment(from)) {\n      from = dateMath.parse(from, false);\n    }\n    if (!moment.isMoment(to)) {\n      to = dateMath.parse(to, true);\n    }\n    const min = from.valueOf();\n    const max = to.valueOf();\n    return {\n      xaxis: {\n        mode: 'time',\n        min: min,\n        max: max,\n        label: 'Datetime',\n        ticks: ticks,\n        timezone: 'browser',\n        timeformat: time_format(ticks, min, max),\n      },\n    };\n  }\n\n  onShowAllTimeSeries = () => {\n    this.setState(\n      {\n        showAllTimeSeries: true,\n      },\n      this.draw\n    );\n  };\n\n  onToggleSeries = (series: TimeSeries, exclusive: boolean) => {\n    this.setState((state, props) => {\n      const { data, onToggleSeries } = props;\n      const { hiddenSeries } = state;\n\n      // Deduplicate series as visibility tracks the alias property\n      const oneSeriesVisible = hiddenSeries.size === new Set(data.map(d => d.alias)).size - 1;\n\n      let nextHiddenSeries = new Set();\n      if (exclusive) {\n        if (hiddenSeries.has(series.alias) || !oneSeriesVisible) {\n          nextHiddenSeries = new Set(data.filter(d => d.alias !== series.alias).map(d => d.alias));\n        }\n      } else {\n        // Prune hidden series no longer part of those available from the most recent query\n        const availableSeries = new Set(data.map(d => d.alias));\n        nextHiddenSeries = intersect(new Set(hiddenSeries), availableSeries);\n        if (nextHiddenSeries.has(series.alias)) {\n          nextHiddenSeries.delete(series.alias);\n        } else {\n          nextHiddenSeries.add(series.alias);\n        }\n      }\n      if (onToggleSeries) {\n        onToggleSeries(series.alias, nextHiddenSeries);\n      }\n      return {\n        hiddenSeries: nextHiddenSeries,\n      };\n    }, this.draw);\n  };\n\n  draw() {\n    const { userOptions = {} } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    const $el = $(`#${this.props.id}`);\n    let series = [{ data: [[0, 0]] }];\n\n    if (data && data.length > 0) {\n      series = data\n        .filter((ts: TimeSeries) => !hiddenSeries.has(ts.alias))\n        .map((ts: TimeSeries) => ({\n          color: ts.color,\n          label: ts.label,\n          data: ts.getFlotPairs('null'),\n        }));\n    }\n\n    this.dynamicOptions = this.getDynamicOptions();\n\n    const options = {\n      ...FLOT_OPTIONS,\n      ...this.dynamicOptions,\n      ...userOptions,\n    };\n\n    $.plot($el, series, options);\n  }\n\n  render() {\n    const { height = 100, id = 'graph' } = this.props;\n    const { hiddenSeries } = this.state;\n    const data = this.getGraphData();\n\n    return (\n      <>\n        {this.props.data && this.props.data.length > MAX_NUMBER_OF_TIME_SERIES && !this.state.showAllTimeSeries && (\n          <div className=\"time-series-disclaimer\">\n            <i className=\"fa fa-fw fa-warning disclaimer-icon\" />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span className=\"show-all-time-series\" onClick={this.onShowAllTimeSeries}>{`Show all ${\n              this.props.data.length\n            }`}</span>\n          </div>\n        )}\n        <div id={id} className=\"explore-graph\" style={{ height }} />\n        <Legend data={data} hiddenSeries={hiddenSeries} onToggleSeries={this.onToggleSeries} />\n      </>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { TimeRange, RawTimeRange } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleGraph, changeTime } from './state/actions';\nimport Graph from './Graph';\nimport Panel from './Panel';\n\ninterface GraphContainerProps {\n  exploreId: ExploreId;\n  graphResult?: any[];\n  loading: boolean;\n  range: RawTimeRange;\n  showingGraph: boolean;\n  showingTable: boolean;\n  split: boolean;\n  toggleGraph: typeof toggleGraph;\n  changeTime: typeof changeTime;\n  width: number;\n}\n\nexport class GraphContainer extends PureComponent<GraphContainerProps> {\n  onClickGraphButton = () => {\n    this.props.toggleGraph(this.props.exploreId, this.props.showingGraph);\n  };\n\n  onChangeTime = (timeRange: TimeRange) => {\n    this.props.changeTime(this.props.exploreId, timeRange);\n  };\n\n  render() {\n    const { exploreId, graphResult, loading, showingGraph, showingTable, range, split, width } = this.props;\n    const graphHeight = showingGraph && showingTable ? 200 : 400;\n\n    if (!graphResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Graph\" isOpen={showingGraph} loading={loading} onToggle={this.onClickGraphButton}>\n        <Graph\n          data={graphResult}\n          height={graphHeight}\n          id={`explore-graph-${exploreId}`}\n          onChangeTime={this.onChangeTime}\n          range={range}\n          split={split}\n          width={width}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const { split } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { graphResult, queryTransactions, range, showingGraph, showingTable } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Graph' && !qt.done);\n  return { graphResult, loading, range, showingGraph, showingTable, split };\n}\n\nconst mapDispatchToProps = {\n  toggleGraph,\n  changeTime,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(GraphContainer)\n);\n","import React, { MouseEvent, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { TimeSeries } from 'app/core/core';\n\ninterface LegendProps {\n  data: TimeSeries[];\n  hiddenSeries: Set<string>;\n  onToggleSeries?: (series: TimeSeries, exclusive: boolean) => void;\n}\n\ninterface LegendItemProps {\n  hidden: boolean;\n  onClickLabel?: (series: TimeSeries, event: MouseEvent) => void;\n  series: TimeSeries;\n}\n\nclass LegendItem extends PureComponent<LegendItemProps> {\n  onClickLabel = e => this.props.onClickLabel(this.props.series, e);\n\n  render() {\n    const { hidden, series } = this.props;\n    const seriesClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n    });\n    return (\n      <div className={`graph-legend-series ${seriesClasses}`}>\n        <div className=\"graph-legend-icon\">\n          <i className=\"fa fa-minus pointer\" style={{ color: series.color }} />\n        </div>\n        <a className=\"graph-legend-alias pointer\" title={series.alias} onClick={this.onClickLabel}>\n          {series.alias}\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default class Legend extends PureComponent<LegendProps> {\n  static defaultProps = {\n    onToggleSeries: () => {},\n  };\n\n  onClickLabel = (series: TimeSeries, event: MouseEvent) => {\n    const { onToggleSeries } = this.props;\n    const exclusive = event.ctrlKey || event.metaKey || event.shiftKey;\n    onToggleSeries(series, !exclusive);\n  };\n\n  render() {\n    const { data, hiddenSeries } = this.props;\n    const items = data || [];\n    return (\n      <div className=\"graph-legend ps\">\n        {items.map((series, i) => (\n          <LegendItem\n            hidden={hiddenSeries.has(series.alias)}\n            // Workaround to resolve conflicts since series visibility tracks the alias property\n            key={`${series.id}-${i}`}\n            onClickLabel={this.onClickLabel}\n            series={series}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { calculateLogsLabelStats, LogLabelStatsModel, LogRowModel } from 'app/core/logs_model';\nimport { LogLabelStats } from './LogLabelStats';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  label: string;\n  plain?: boolean;\n  value: string;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  showStats: boolean;\n  stats: LogLabelStatsModel[];\n}\n\nexport class LogLabel extends PureComponent<Props, State> {\n  state = {\n    stats: null,\n    showStats: false,\n  };\n\n  onClickClose = () => {\n    this.setState({ showStats: false });\n  };\n\n  onClickLabel = () => {\n    const { onClickLabel, label, value } = this.props;\n    if (onClickLabel) {\n      onClickLabel(label, value);\n    }\n  };\n\n  onClickStats = () => {\n    this.setState(state => {\n      if (state.showStats) {\n        return { showStats: false, stats: null };\n      }\n      const allRows = this.props.getRows();\n      const stats = calculateLogsLabelStats(allRows, this.props.label);\n      return { showStats: true, stats };\n    });\n  };\n\n  render() {\n    const { getRows, label, plain, value } = this.props;\n    const { showStats, stats } = this.state;\n    const tooltip = `${label}: ${value}`;\n    return (\n      <span className=\"logs-label\">\n        <span className=\"logs-label__value\" title={tooltip}>\n          {value}\n        </span>\n        {!plain && (\n          <span title=\"Filter for label\" onClick={this.onClickLabel} className=\"logs-label__icon fa fa-search-plus\" />\n        )}\n        {!plain && getRows && <span onClick={this.onClickStats} className=\"logs-label__icon fa fa-signal\" />}\n        {showStats && (\n          <span className=\"logs-label__stats\">\n            <LogLabelStats\n              stats={stats}\n              rowCount={getRows().length}\n              label={label}\n              value={value}\n              onClickClose={this.onClickClose}\n            />\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport classnames from 'classnames';\nimport { LogLabelStatsModel } from 'app/core/logs_model';\n\nfunction LogLabelStatsRow(logLabelStatsModel: LogLabelStatsModel) {\n  const { active, count, proportion, value } = logLabelStatsModel;\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = classnames('logs-stats-row', { 'logs-stats-row--active': active });\n\n  return (\n    <div className={className}>\n      <div className=\"logs-stats-row__label\">\n        <div className=\"logs-stats-row__value\" title={value}>\n          {value}\n        </div>\n        <div className=\"logs-stats-row__count\">{count}</div>\n        <div className=\"logs-stats-row__percent\">{percent}</div>\n      </div>\n      <div className=\"logs-stats-row__bar\">\n        <div className=\"logs-stats-row__innerbar\" style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nconst STATS_ROW_LIMIT = 5;\n\ninterface Props {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  onClickClose: () => void;\n}\n\nexport class LogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, onClickClose } = this.props;\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find(row => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find(row => row.value === value);\n      otherRows = otherRows.filter(row => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className=\"logs-stats\">\n        <div className=\"logs-stats__header\">\n          <span className=\"logs-stats__title\">\n            {label}: {total} of {rowCount} rows have that label\n          </span>\n          <span className=\"logs-stats__close fa fa-remove\" onClick={onClickClose} />\n        </div>\n        <div className=\"logs-stats__body\">\n          {topRows.map(stat => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { LogRowModel } from 'app/core/logs_model';\nimport { LogLabel } from './LogLabel';\nimport { Labels } from '@grafana/ui';\n\ninterface Props {\n  getRows?: () => LogRowModel[];\n  labels: Labels;\n  plain?: boolean;\n  onClickLabel?: (label: string, value: string) => void;\n}\n\nexport class LogLabels extends PureComponent<Props> {\n  render() {\n    const { getRows, labels, onClickLabel, plain } = this.props;\n    return (\n      <span className=\"logs-labels\">\n        {Object.keys(labels).map(key => (\n          <LogLabel\n            key={key}\n            getRows={getRows}\n            label={key}\n            value={labels[key]}\n            plain={plain}\n            onClickLabel={onClickLabel}\n          />\n        ))}\n      </span>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport ansicolor from 'vendor/ansicolor/ansicolor';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(css: string): Style {\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-(a-z)/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props {\n  value: string;\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class LogMessageAnsi extends PureComponent<Props, State> {\n  state = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map(span => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) =>\n      chunk.style ? (\n        <span key={index} style={chunk.style}>\n          {chunk.text}\n        </span>\n      ) : (\n        chunk.text\n      )\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport classnames from 'classnames';\n\nimport { LogRowModel, LogLabelStatsModel, LogsParser, calculateFieldStats, getParser } from 'app/core/logs_model';\nimport { LogLabels } from './LogLabels';\nimport { findHighlightChunksInText } from 'app/core/utils/text';\nimport { LogLabelStats } from './LogLabelStats';\nimport { LogMessageAnsi } from './LogMessageAnsi';\n\ninterface Props {\n  highlighterExpressions?: string[];\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n  getRows: () => LogRowModel[];\n  onClickLabel?: (label: string, value: string) => void;\n}\n\ninterface State {\n  fieldCount: number;\n  fieldLabel: string;\n  fieldStats: LogLabelStatsModel[];\n  fieldValue: string;\n  parsed: boolean;\n  parser?: LogsParser;\n  parsedFieldHighlights: string[];\n  showFieldStats: boolean;\n}\n\n/**\n * Renders a highlighted field.\n * When hovering, a stats icon is shown.\n */\nconst FieldHighlight = onClick => props => {\n  return (\n    <span className={props.className} style={props.style}>\n      {props.children}\n      <span className=\"logs-row__field-highlight--icon fa fa-signal\" onClick={() => onClick(props.children)} />\n    </span>\n  );\n};\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nexport class LogRow extends PureComponent<Props, State> {\n  mouseMessageTimer: NodeJS.Timer;\n\n  state = {\n    fieldCount: 0,\n    fieldLabel: null,\n    fieldStats: null,\n    fieldValue: null,\n    parsed: false,\n    parser: undefined,\n    parsedFieldHighlights: [],\n    showFieldStats: false,\n  };\n\n  componentWillUnmount() {\n    clearTimeout(this.mouseMessageTimer);\n  }\n\n  onClickClose = () => {\n    this.setState({ showFieldStats: false });\n  };\n\n  onClickHighlight = (fieldText: string) => {\n    const { getRows } = this.props;\n    const { parser } = this.state;\n    const allRows = getRows();\n\n    // Build value-agnostic row matcher based on the field label\n    const fieldLabel = parser.getLabelFromField(fieldText);\n    const fieldValue = parser.getValueFromField(fieldText);\n    const matcher = parser.buildMatcher(fieldLabel);\n    const fieldStats = calculateFieldStats(allRows, matcher);\n    const fieldCount = fieldStats.reduce((sum, stat) => sum + stat.count, 0);\n\n    this.setState({ fieldCount, fieldLabel, fieldStats, fieldValue, showFieldStats: true });\n  };\n\n  onMouseOverMessage = () => {\n    // Don't parse right away, user might move along\n    this.mouseMessageTimer = setTimeout(this.parseMessage, 500);\n  };\n\n  onMouseOutMessage = () => {\n    clearTimeout(this.mouseMessageTimer);\n    this.setState({ parsed: false });\n  };\n\n  parseMessage = () => {\n    if (!this.state.parsed) {\n      const { row } = this.props;\n      const parser = getParser(row.entry);\n      if (parser) {\n        // Use parser to highlight detected fields\n        const parsedFieldHighlights = parser.getFields(this.props.row.entry);\n        this.setState({ parsedFieldHighlights, parsed: true, parser });\n      }\n    }\n  };\n\n  render() {\n    const {\n      getRows,\n      highlighterExpressions,\n      onClickLabel,\n      row,\n      showDuplicates,\n      showLabels,\n      showLocalTime,\n      showUtc,\n    } = this.props;\n    const {\n      fieldCount,\n      fieldLabel,\n      fieldStats,\n      fieldValue,\n      parsed,\n      parsedFieldHighlights,\n      showFieldStats,\n    } = this.state;\n    const { entry, hasAnsi, raw } = row;\n    const previewHighlights = highlighterExpressions && !_.isEqual(highlighterExpressions, row.searchWords);\n    const highlights = previewHighlights ? highlighterExpressions : row.searchWords;\n    const needsHighlighter = highlights && highlights.length > 0 && highlights[0].length > 0;\n    const highlightClassName = classnames('logs-row__match-highlight', {\n      'logs-row__match-highlight--preview': previewHighlights,\n    });\n\n    return (\n      <div className=\"logs-row\">\n        {showDuplicates && (\n          <div className=\"logs-row__duplicates\">{row.duplicates > 0 ? `${row.duplicates + 1}x` : null}</div>\n        )}\n        <div className={row.logLevel ? `logs-row__level logs-row__level--${row.logLevel}` : ''} />\n        {showUtc && (\n          <div className=\"logs-row__time\" title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n            {row.timestamp}\n          </div>\n        )}\n        {showLocalTime && (\n          <div className=\"logs-row__localtime\" title={`${row.timestamp} (${row.timeFromNow})`}>\n            {row.timeLocal}\n          </div>\n        )}\n        {showLabels && (\n          <div className=\"logs-row__labels\">\n            <LogLabels getRows={getRows} labels={row.uniqueLabels} onClickLabel={onClickLabel} />\n          </div>\n        )}\n        <div className=\"logs-row__message\" onMouseEnter={this.onMouseOverMessage} onMouseLeave={this.onMouseOutMessage}>\n          {parsed && (\n            <Highlighter\n              autoEscape\n              highlightTag={FieldHighlight(this.onClickHighlight)}\n              textToHighlight={entry}\n              searchWords={parsedFieldHighlights}\n              highlightClassName=\"logs-row__field-highlight\"\n            />\n          )}\n          {!parsed && needsHighlighter && (\n            <Highlighter\n              textToHighlight={entry}\n              searchWords={highlights}\n              findChunks={findHighlightChunksInText}\n              highlightClassName={highlightClassName}\n            />\n          )}\n          {hasAnsi && !parsed && !needsHighlighter && <LogMessageAnsi value={raw} />}\n          {!hasAnsi && !parsed && !needsHighlighter && entry}\n          {showFieldStats && (\n            <div className=\"logs-row__stats\">\n              <LogLabelStats\n                stats={fieldStats}\n                label={fieldLabel}\n                value={fieldValue}\n                onClickClose={this.onClickClose}\n                rowCount={fieldCount}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { RawTimeRange, Switch, LogLevel } from '@grafana/ui';\nimport TimeSeries from 'app/core/time_series2';\n\nimport { LogsDedupDescription, LogsDedupStrategy, LogsModel, LogsMetaKind } from 'app/core/logs_model';\n\nimport ToggleButtonGroup, { ToggleButton } from 'app/core/components/ToggleButtonGroup/ToggleButtonGroup';\n\nimport Graph from './Graph';\nimport { LogLabels } from './LogLabels';\nimport { LogRow } from './LogRow';\n\nconst PREVIEW_LIMIT = 100;\n\nconst graphOptions = {\n  series: {\n    stack: true,\n    bars: {\n      show: true,\n      lineWidth: 5,\n      // barWidth: 10,\n    },\n    // stack: true,\n  },\n  yaxis: {\n    tickDecimals: 0,\n  },\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} plain />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  data?: LogsModel;\n  dedupedData?: LogsModel;\n  width: number;\n  exploreId: string;\n  highlighterExpressions: string[];\n  loading: boolean;\n  range?: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  onChangeTime?: (range: RawTimeRange) => void;\n  onClickLabel?: (label: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: Set<LogLevel>) => void;\n}\n\ninterface State {\n  deferLogs: boolean;\n  renderAll: boolean;\n  showLabels: boolean;\n  showLocalTime: boolean;\n  showUtc: boolean;\n}\n\nexport default class Logs extends PureComponent<Props, State> {\n  deferLogsTimer: NodeJS.Timer;\n  renderAllTimer: NodeJS.Timer;\n\n  state = {\n    deferLogs: true,\n    renderAll: false,\n    showLabels: false,\n    showLocalTime: true,\n    showUtc: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    if (this.state.deferLogs) {\n      const { data } = this.props;\n      const rowCount = data && data.rows ? data.rows.length : 0;\n      // Render all right away if not too far over the limit\n      const renderAll = rowCount <= PREVIEW_LIMIT * 2;\n      this.deferLogsTimer = setTimeout(() => this.setState({ deferLogs: false, renderAll }), rowCount);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Staged rendering\n    if (prevState.deferLogs && !this.state.deferLogs && !this.state.renderAll) {\n      this.renderAllTimer = setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.deferLogsTimer);\n    clearTimeout(this.renderAllTimer);\n  }\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLabels: target.checked,\n    });\n  };\n\n  onChangeLocalTime = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showLocalTime: target.checked,\n    });\n  };\n\n  onChangeUtc = (event: React.SyntheticEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({\n      showUtc: target.checked,\n    });\n  };\n\n  onToggleLogLevel = (rawLevel: string, hiddenRawLevels: Set<string>) => {\n    const hiddenLogLevels: Set<LogLevel> = new Set(Array.from(hiddenRawLevels).map(level => LogLevel[level]));\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStartScanning();\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    this.props.onStopScanning();\n  };\n\n  render() {\n    const {\n      data,\n      exploreId,\n      highlighterExpressions,\n      loading = false,\n      onClickLabel,\n      range,\n      scanning,\n      scanRange,\n      width,\n      dedupedData,\n    } = this.props;\n\n    if (!data) {\n      return null;\n    }\n\n    const { deferLogs, renderAll, showLabels, showLocalTime, showUtc } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = data && data.rows && data.rows.length > 0;\n    const hasLabel = hasData && dedupedData.hasUniqueLabels;\n    const dedupCount = dedupedData.rows.reduce((sum, row) => sum + row.duplicates, 0);\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    const meta = [...data.meta];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Staged rendering\n    const processedRows = dedupedData.rows;\n    const firstRows = processedRows.slice(0, PREVIEW_LIMIT);\n    const lastRows = processedRows.slice(PREVIEW_LIMIT);\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = () => processedRows;\n    const timeSeries = data.series.map(series => new TimeSeries(series));\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <Graph\n            data={timeSeries}\n            height={100}\n            width={width}\n            range={range}\n            id={`explore-logs-graph-${exploreId}`}\n            onChangeTime={this.props.onChangeTime}\n            onToggleSeries={this.onToggleLogLevel}\n            userOptions={graphOptions}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Timestamp\" checked={showUtc} onChange={this.onChangeUtc} transparent />\n            <Switch label=\"Local time\" checked={showLocalTime} onChange={this.onChangeLocalTime} transparent />\n            <Switch label=\"Labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"logs-rows\">\n          {hasData &&\n          !deferLogs && // Only inject highlighterExpression in the first set for performance reasons\n            firstRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                highlighterExpressions={highlighterExpressions}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData &&\n            !deferLogs &&\n            renderAll &&\n            lastRows.map(row => (\n              <LogRow\n                key={row.key + row.duplicates}\n                getRows={getRows}\n                row={row}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels && hasLabel}\n                showLocalTime={showLocalTime}\n                showUtc={showUtc}\n                onClickLabel={onClickLabel}\n              />\n            ))}\n          {hasData && deferLogs && <span>Rendering {dedupedData.rows.length} rows...</span>}\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { RawTimeRange, TimeRange, LogLevel } from '@grafana/ui';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { LogsModel, LogsDedupStrategy } from 'app/core/logs_model';\nimport { StoreState } from 'app/types';\n\nimport { toggleLogs, changeDedupStrategy } from './state/actions';\nimport Logs from './Logs';\nimport Panel from './Panel';\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedLogsSelector, exploreItemUIStateSelector } from 'app/features/explore/state/selectors';\n\ninterface LogsContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  logsHighlighterExpressions?: string[];\n  logsResult?: LogsModel;\n  dedupedResult?: LogsModel;\n  onChangeTime: (range: TimeRange) => void;\n  onClickLabel: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  range: RawTimeRange;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  showingLogs: boolean;\n  toggleLogs: typeof toggleLogs;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: Set<LogLevel>;\n  width: number;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onClickLogsButton = () => {\n    this.props.toggleLogs(this.props.exploreId, this.props.showingLogs);\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  hangleToggleLogLevel = (hiddenLogLevels: Set<LogLevel>) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  render() {\n    const {\n      exploreId,\n      loading,\n      logsHighlighterExpressions,\n      logsResult,\n      dedupedResult,\n      onChangeTime,\n      onClickLabel,\n      onStartScanning,\n      onStopScanning,\n      range,\n      showingLogs,\n      scanning,\n      scanRange,\n      width,\n      hiddenLogLevels,\n    } = this.props;\n\n    return (\n      <Panel label=\"Logs\" loading={loading} isOpen={showingLogs} onToggle={this.onClickLogsButton}>\n        <Logs\n          dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n          data={logsResult}\n          dedupedData={dedupedResult}\n          exploreId={exploreId}\n          key={logsResult && logsResult.id}\n          highlighterExpressions={logsHighlighterExpressions}\n          loading={loading}\n          onChangeTime={onChangeTime}\n          onClickLabel={onClickLabel}\n          onStartScanning={onStartScanning}\n          onStopScanning={onStopScanning}\n          onDedupStrategyChange={this.handleDedupStrategyChange}\n          onToggleLogLevel={this.hangleToggleLogLevel}\n          range={range}\n          scanning={scanning}\n          scanRange={scanRange}\n          width={width}\n          hiddenLogLevels={hiddenLogLevels}\n        />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { logsHighlighterExpressions, logsResult, queryTransactions, scanning, scanRange, range } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Logs' && !qt.done);\n  const { showingLogs, dedupStrategy } = exploreItemUIStateSelector(item);\n  const hiddenLogLevels = new Set(item.hiddenLogLevels);\n  const dedupedResult = deduplicatedLogsSelector(item);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logsResult,\n    scanning,\n    scanRange,\n    showingLogs,\n    range,\n    dedupStrategy,\n    hiddenLogLevels,\n    dedupedResult,\n  };\n}\n\nconst mapDispatchToProps = {\n  toggleLogs,\n  changeDedupStrategy,\n  toggleLogLevelAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LogsContainer)\n);\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport { ThemeContext, LargeLinkButton, CallToActionCard } from '@grafana/ui';\n\nexport const NoDataSourceCallToAction = () => {\n  const theme = useContext(ThemeContext);\n\n  const message =\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\n  const footer = (\n    <>\n      <i className=\"fa fa-rocket\" />\n      <> ProTip: You can also define data sources through configuration files. </>\n      <a\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\n        target=\"_blank\"\n        className=\"text-link\"\n      >\n        Learn more\n      </a>\n    </>\n  );\n\n  const ctaElement = (\n    <LargeLinkButton href=\"/datasources/new\" icon=\"gicon gicon-datasources\">\n      Add data source\n    </LargeLinkButton>\n  );\n\n  const cardClassName = css`\n    max-width: ${theme.breakpoints.lg};\n  `;\n\n  return (\n    <CallToActionCard\n      callToActionElement={ctaElement}\n      className={cardClassName}\n      footer={footer}\n      message={message}\n      theme={theme}\n    />\n  );\n};\n","import React, { PureComponent } from 'react';\n\ninterface Props {\n  isOpen: boolean;\n  label: string;\n  loading?: boolean;\n  onToggle: (isOpen: boolean) => void;\n}\n\nexport default class Panel extends PureComponent<Props> {\n  onClickToggle = () => this.props.onToggle(!this.props.isOpen);\n\n  render() {\n    const { isOpen, loading } = this.props;\n    const iconClass = isOpen ? 'fa fa-caret-up' : 'fa fa-caret-down';\n    const loaderClass = loading ? 'explore-panel__loader explore-panel__loader--active' : 'explore-panel__loader';\n    return (\n      <div className=\"explore-panel panel-container\">\n        <div className=\"explore-panel__header\" onClick={this.onClickToggle}>\n          <div className=\"explore-panel__header-buttons\">\n            <span className={iconClass} />\n          </div>\n          <div className=\"explore-panel__header-label\">{this.props.label}</div>\n        </div>\n        {isOpen && (\n          <div className=\"explore-panel__body\">\n            <div className={loaderClass} />\n            {this.props.children}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from 'app/core/services/AngularLoader';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { RawTimeRange, DataQuery } from '@grafana/ui';\nimport 'app/features/plugins/plugin_loader';\n\ninterface QueryEditorProps {\n  datasource: any;\n  error?: string | JSX.Element;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          this.props.onQueryChange(target);\n          this.props.onExecuteQuery();\n        },\n        onQueryChange: () => {\n          this.props.onQueryChange(target);\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.props.onQueryChange(target);\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: range,\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n// @ts-ignore\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n\n// Components\nimport QueryEditor from './QueryEditor';\nimport QueryTransactionStatus from './QueryTransactionStatus';\n\n// Actions\nimport { changeQuery, modifyQueries, runQueries, addQueryRow } from './state/actions';\n\n// Types\nimport { StoreState } from 'app/types';\nimport {\n  RawTimeRange,\n  DataQuery,\n  ExploreDataSourceApi,\n  QueryHint,\n  QueryFixAction,\n  DataSourceStatus,\n} from '@grafana/ui';\nimport { QueryTransaction, HistoryItem, ExploreItemState, ExploreId } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\n\nfunction getFirstHintFromTransactions(transactions: QueryTransaction[]): QueryHint {\n  const transaction = transactions.find(qt => qt.hints && qt.hints.length > 0);\n  if (transaction) {\n    return transaction.hints[0];\n  }\n  return undefined;\n}\n\ninterface QueryRowProps {\n  addQueryRow: typeof addQueryRow;\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: ExploreDataSourceApi;\n  datasourceStatus: DataSourceStatus;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  index: number;\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  queryTransactions: QueryTransaction[];\n  exploreEvents: Emitter;\n  range: RawTimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n}\n\nexport class QueryRow extends PureComponent<QueryRowProps> {\n  onExecuteQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChangeQuery = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickAddButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.addQueryRow(exploreId, index);\n  };\n\n  onClickClearButton = () => {\n    this.onChangeQuery(null, true);\n  };\n\n  onClickHintFix = (action: QueryFixAction) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    if (datasourceInstance && datasourceInstance.modifyQuery) {\n      const modifier = (queries: DataQuery, action: QueryFixAction) => datasourceInstance.modifyQuery(queries, action);\n      this.props.modifyQueries(exploreId, action, index, modifier);\n    }\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n  };\n\n  updateLogsHighlights = _.debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = [datasourceInstance.getHighlighterExpression(value)];\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const {\n      datasourceInstance,\n      history,\n      index,\n      query,\n      queryTransactions,\n      exploreEvents,\n      range,\n      datasourceStatus,\n    } = this.props;\n\n    const transactions = queryTransactions.filter(t => t.rowIndex === index);\n    const transactionWithError = transactions.find(t => t.error !== undefined);\n    const hint = getFirstHintFromTransactions(transactions);\n    const queryError = transactionWithError ? transactionWithError.error : null;\n    const QueryField = datasourceInstance.components.ExploreQueryField;\n\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-status\">\n          <QueryTransactionStatus transactions={transactions} />\n        </div>\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              datasourceStatus={datasourceStatus}\n              query={query}\n              error={queryError}\n              hint={hint}\n              history={history}\n              onExecuteQuery={this.onExecuteQuery}\n              onExecuteHint={this.onClickHintFix}\n              onQueryChange={this.onChangeQuery}\n            />\n          ) : (\n            <QueryEditor\n              datasource={datasourceInstance}\n              error={queryError}\n              onQueryChange={this.onChangeQuery}\n              onExecuteQuery={this.onExecuteQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n            />\n          )}\n        </div>\n        <div className=\"gf-form-inline flex-shrink-0\">\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickClearButton}>\n              <i className=\"fa fa-times\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickAddButton}>\n              <i className=\"fa fa-plus\" />\n            </button>\n          </div>\n          <div className=\"gf-form\">\n            <button className=\"gf-form-label gf-form-label--btn\" onClick={this.onClickRemoveButton}>\n              <i className=\"fa fa-minus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }: QueryRowProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, queries, queryTransactions, range, datasourceError } = item;\n  const query = queries[index];\n  return {\n    datasourceInstance,\n    history,\n    query,\n    queryTransactions,\n    range,\n    datasourceStatus: datasourceError ? DataSourceStatus.Disconnected : DataSourceStatus.Connected,\n  };\n}\n\nconst mapDispatchToProps = {\n  addQueryRow,\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(QueryRow)\n);\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryTransaction } from 'app/types/explore';\nimport ElapsedTime from './ElapsedTime';\n\nfunction formatLatency(value) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\ninterface QueryTransactionStatusItemProps {\n  transaction: QueryTransaction;\n}\n\nclass QueryTransactionStatusItem extends PureComponent<QueryTransactionStatusItemProps> {\n  render() {\n    const { transaction } = this.props;\n    const className = transaction.done ? 'query-transaction' : 'query-transaction query-transaction--loading';\n    return (\n      <div className={className}>\n        <div className=\"query-transaction__type\">{transaction.resultType}:</div>\n        <div className=\"query-transaction__duration\">\n          {transaction.done ? formatLatency(transaction.latency) : <ElapsedTime />}\n        </div>\n      </div>\n    );\n  }\n}\n\ninterface QueryTransactionStatusProps {\n  transactions: QueryTransaction[];\n}\n\nexport default class QueryTransactionStatus extends PureComponent<QueryTransactionStatusProps> {\n  render() {\n    const { transactions } = this.props;\n    return (\n      <div className=\"query-transactions\">\n        {transactions.map((t, i) => (\n          <QueryTransactionStatusItem key={`${t.rowIndex}:${t.resultType}`} transaction={t} />\n        ))}\n      </div>\n    );\n  }\n}\n","import _ from 'lodash';\nimport React, { PureComponent } from 'react';\nimport ReactTable from 'react-table';\n\nimport TableModel from 'app/core/table_model';\n\nconst EMPTY_TABLE = new TableModel();\n// Identify columns that contain values\nconst VALUE_REGEX = /^[Vv]alue #\\d+/;\n\ninterface TableProps {\n  data: TableModel;\n  loading: boolean;\n  onClickCell?: (columnKey: string, rowValue: string) => void;\n}\n\nfunction prepareRows(rows, columnNames) {\n  return rows.map(cells => _.zipObject(columnNames, cells));\n}\n\nexport default class Table extends PureComponent<TableProps> {\n  getCellProps = (state, rowInfo, column) => {\n    return {\n      onClick: (e: React.SyntheticEvent) => {\n        // Only handle click on link, not the cell\n        if (e.target) {\n          const link = e.target as HTMLElement;\n          if (link.className === 'link') {\n            const columnKey = column.Header;\n            const rowValue = rowInfo.row[columnKey];\n            this.props.onClickCell(columnKey, rowValue);\n          }\n        }\n      },\n    };\n  };\n\n  render() {\n    const { data, loading } = this.props;\n    const tableModel = data || EMPTY_TABLE;\n    const columnNames = tableModel.columns.map(({ text }) => text);\n    const columns = tableModel.columns.map(({ filterable, text }) => ({\n      Header: () => <span title={text}>{text}</span>,\n      accessor: text,\n      className: VALUE_REGEX.test(text) ? 'text-right' : '',\n      show: text !== 'Time',\n      Cell: row => (\n        <span className={filterable ? 'link' : ''} title={text + ': ' + row.value}>\n          {row.value}\n        </span>\n      ),\n    }));\n    const noDataText = data ? 'The queries returned no data for a table.' : '';\n\n    return (\n      <ReactTable\n        columns={columns}\n        data={tableModel.rows}\n        getTdProps={this.getCellProps}\n        loading={loading}\n        minRows={0}\n        noDataText={noDataText}\n        resolveData={data => prepareRows(data, columnNames)}\n        showPagination={Boolean(data)}\n      />\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { toggleTable } from './state/actions';\nimport Table from './Table';\nimport Panel from './Panel';\nimport TableModel from 'app/core/table_model';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: TableModel;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult } = this.props;\n\n    if (!tableResult) {\n      return null;\n    }\n\n    return (\n      <Panel label=\"Table\" loading={loading} isOpen={showingTable} onToggle={this.onClickTableButton}>\n        <Table data={tableResult} loading={loading} onClickCell={onClickCell} />\n      </Panel>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { queryTransactions, showingTable, tableResult } = item;\n  const loading = queryTransactions.some(qt => qt.resultType === 'Table' && !qt.done);\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(TableContainer)\n);\n","import React, { PureComponent } from 'react';\nimport moment from 'moment';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as rangeUtil from 'app/core/utils/rangeutil';\nimport { Input, RawTimeRange, TimeRange } from '@grafana/ui';\n\nconst DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now',\n};\n\n/**\n * Return a human-editable string of either relative (inludes \"now\") or absolute local time (in the shape of DATE_FORMAT).\n * @param value Epoch or relative time\n */\nexport function parseTime(value: string | moment.Moment, isUtc = false, ensureString = false): string | moment.Moment {\n  if (moment.isMoment(value)) {\n    if (ensureString) {\n      return value.format(DATE_FORMAT);\n    }\n    return value;\n  }\n  if ((value as string).indexOf('now') !== -1) {\n    return value;\n  }\n  let time: any = value;\n  // Possible epoch\n  if (!isNaN(time)) {\n    time = parseInt(time, 10);\n  }\n  time = isUtc ? moment.utc(time) : moment(time);\n  return time.format(DATE_FORMAT);\n}\n\ninterface TimePickerProps {\n  isOpen?: boolean;\n  isUtc?: boolean;\n  range?: RawTimeRange;\n  onChangeTime?: (range: RawTimeRange, scanning?: boolean) => void;\n}\n\ninterface TimePickerState {\n  isOpen: boolean;\n  isUtc: boolean;\n  rangeString: string;\n  refreshInterval?: string;\n  initialRange?: RawTimeRange;\n\n  // Input-controlled text, keep these in a shape that is human-editable\n  fromRaw: string;\n  toRaw: string;\n}\n\n/**\n * TimePicker with dropdown menu for relative dates.\n *\n * Initialize with a range that is either based on relative time strings,\n * or on Moment objects.\n * Internally the component needs to keep a string representation in `fromRaw`\n * and `toRaw` for the controlled inputs.\n * When a time is picked, `onChangeTime` is called with the new range that\n * is again based on relative time strings or Moment objects.\n */\nexport default class TimePicker extends PureComponent<TimePickerProps, TimePickerState> {\n  dropdownEl: any;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.isOpen,\n      isUtc: props.isUtc,\n      rangeString: '',\n      fromRaw: '',\n      toRaw: '',\n      initialRange: DEFAULT_RANGE,\n      refreshInterval: '',\n    };\n  } //Temp solution... How do detect if ds supports table format?\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.initialRange && state.initialRange === props.range) {\n      return state;\n    }\n\n    const from = props.range ? props.range.from : DEFAULT_RANGE.from;\n    const to = props.range ? props.range.to : DEFAULT_RANGE.to;\n\n    // Ensure internal string format\n    const fromRaw = parseTime(from, props.isUtc, true);\n    const toRaw = parseTime(to, props.isUtc, true);\n    const range = {\n      from: fromRaw,\n      to: toRaw,\n    };\n\n    return {\n      ...state,\n      fromRaw,\n      toRaw,\n      initialRange: props.range,\n      rangeString: rangeUtil.describeTimeRange(range),\n    };\n  }\n\n  move(direction: number, scanning?: boolean): RawTimeRange {\n    const { onChangeTime } = this.props;\n    const { fromRaw, toRaw } = this.state;\n    const from = dateMath.parse(fromRaw, false);\n    const to = dateMath.parse(toRaw, true);\n    const step = scanning ? 1 : 2;\n    const timespan = (to.valueOf() - from.valueOf()) / step;\n\n    let nextTo, nextFrom;\n    if (direction === -1) {\n      nextTo = to.valueOf() - timespan;\n      nextFrom = from.valueOf() - timespan;\n    } else if (direction === 1) {\n      nextTo = to.valueOf() + timespan;\n      nextFrom = from.valueOf() + timespan;\n      if (nextTo > Date.now() && to.valueOf() < Date.now()) {\n        nextTo = Date.now();\n        nextFrom = from.valueOf();\n      }\n    } else {\n      nextTo = to.valueOf();\n      nextFrom = from.valueOf();\n    }\n\n    const nextRange = {\n      from: moment(nextFrom),\n      to: moment(nextTo),\n    };\n\n    const nextTimeRange: TimeRange = {\n      raw: nextRange,\n      from: nextRange.from,\n      to: nextRange.to,\n    };\n\n    this.setState(\n      {\n        rangeString: rangeUtil.describeTimeRange(nextRange),\n        fromRaw: nextRange.from.format(DATE_FORMAT),\n        toRaw: nextRange.to.format(DATE_FORMAT),\n      },\n      () => {\n        onChangeTime(nextTimeRange, scanning);\n      }\n    );\n\n    return nextRange;\n  }\n\n  handleChangeFrom = e => {\n    this.setState({\n      fromRaw: e.target.value,\n    });\n  };\n\n  handleChangeTo = e => {\n    this.setState({\n      toRaw: e.target.value,\n    });\n  };\n\n  handleClickApply = () => {\n    const { onChangeTime } = this.props;\n    let range;\n    this.setState(\n      state => {\n        const { toRaw, fromRaw } = this.state;\n        range = {\n          from: dateMath.parse(fromRaw, false),\n          to: dateMath.parse(toRaw, true),\n        };\n        const rangeString = rangeUtil.describeTimeRange(range);\n        return {\n          isOpen: false,\n          rangeString,\n        };\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  handleClickLeft = () => this.move(-1);\n  handleClickPicker = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n    }));\n  };\n  handleClickRight = () => this.move(1);\n  handleClickRefresh = () => {};\n  handleClickRelativeOption = range => {\n    const { onChangeTime } = this.props;\n    const rangeString = rangeUtil.describeTimeRange(range);\n    this.setState(\n      {\n        toRaw: range.to,\n        fromRaw: range.from,\n        isOpen: false,\n        rangeString,\n      },\n      () => {\n        if (onChangeTime) {\n          onChangeTime(range);\n        }\n      }\n    );\n  };\n\n  getTimeOptions() {\n    return rangeUtil.getRelativeTimesList({}, this.state.rangeString);\n  }\n\n  dropdownRef = el => {\n    this.dropdownEl = el;\n  };\n\n  renderDropdown() {\n    const { fromRaw, isOpen, toRaw } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n    const timeOptions = this.getTimeOptions();\n    return (\n      <div ref={this.dropdownRef} className=\"gf-timepicker-dropdown\">\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Quick ranges</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-relative-section\">\n            {Object.keys(timeOptions).map(section => {\n              const group = timeOptions[section];\n              return (\n                <ul key={section}>\n                  {group.map(option => (\n                    <li className={option.active ? 'active' : ''} key={option.display}>\n                      <a onClick={() => this.handleClickRelativeOption(option)}>{option.display}</a>\n                    </li>\n                  ))}\n                </ul>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"popover-box\">\n          <div className=\"popover-box__header\">\n            <span className=\"popover-box__title\">Custom range</span>\n          </div>\n          <div className=\"popover-box__body gf-timepicker-absolute-section\">\n            <label className=\"small\">From:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-from\"\n                  value={fromRaw}\n                  onChange={this.handleChangeFrom}\n                />\n              </div>\n            </div>\n\n            <label className=\"small\">To:</label>\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form max-width-28\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input input-large timepicker-to\"\n                  value={toRaw}\n                  onChange={this.handleChangeTo}\n                />\n              </div>\n            </div>\n            <div className=\"gf-form\">\n              <button className=\"btn gf-form-btn btn-secondary\" onClick={this.handleClickApply}>\n                Apply\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { isUtc, rangeString, refreshInterval } = this.state;\n\n    return (\n      <div className=\"timepicker\">\n        <div className=\"navbar-buttons\">\n          <button className=\"btn navbar-button navbar-button--tight timepicker-left\" onClick={this.handleClickLeft}>\n            <i className=\"fa fa-chevron-left\" />\n          </button>\n          <button className=\"btn navbar-button gf-timepicker-nav-btn\" onClick={this.handleClickPicker}>\n            <i className=\"fa fa-clock-o\" />\n            <span className=\"timepicker-rangestring\">{rangeString}</span>\n            {isUtc ? <span className=\"gf-timepicker-utc\">UTC</span> : null}\n            {refreshInterval ? <span className=\"text-warning\">&nbsp; Refresh every {refreshInterval}</span> : null}\n          </button>\n          <button className=\"btn navbar-button navbar-button--tight timepicker-right\" onClick={this.handleClickRight}>\n            <i className=\"fa fa-chevron-right\" />\n          </button>\n        </div>\n        {this.renderDropdown()}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport ErrorBoundary from './ErrorBoundary';\nimport Explore from './Explore';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  split: boolean;\n  resetExploreAction: typeof resetExploreAction;\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  componentWillUnmount() {\n    this.props.resetExploreAction();\n  }\n\n  render() {\n    const { split } = this.props;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'} className=\"custom-scrollbar--page\">\n          <div className=\"explore-wrapper\">\n            <ErrorBoundary>\n              <Explore exploreId={ExploreId.left} />\n            </ErrorBoundary>\n            {split && (\n              <ErrorBoundary>\n                <Explore exploreId={ExploreId.right} />\n              </ErrorBoundary>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const { split } = state.explore;\n  return { split };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Wrapper)\n);\n","// Libraries\n// @ts-ignore\nimport _ from 'lodash';\n\n// Services & Utils\nimport store from 'app/core/store';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { Emitter } from 'app/core/core';\nimport {\n  LAST_USED_DATASOURCE_KEY,\n  clearQueryKeys,\n  ensureQueries,\n  generateEmptyQuery,\n  hasNonEmptyQuery,\n  makeTimeSeriesList,\n  updateHistory,\n  buildQueryTransaction,\n  serializeStateToUrlParam,\n  parseUrlState,\n} from 'app/core/utils/explore';\n\n// Actions\nimport { updateLocation } from 'app/core/actions';\n\n// Types\nimport { ThunkResult } from 'app/types';\nimport {\n  RawTimeRange,\n  TimeRange,\n  DataSourceApi,\n  DataQuery,\n  DataSourceSelectItem,\n  QueryHint,\n  QueryFixAction,\n} from '@grafana/ui/src/types';\nimport {\n  ExploreId,\n  ExploreUrlState,\n  RangeScanner,\n  ResultType,\n  QueryOptions,\n  ExploreUIState,\n  QueryTransaction,\n} from 'app/types/explore';\nimport {\n  updateDatasourceInstanceAction,\n  changeQueryAction,\n  changeSizeAction,\n  ChangeSizePayload,\n  changeTimeAction,\n  scanStopAction,\n  clearQueriesAction,\n  initializeExploreAction,\n  loadDatasourceMissingAction,\n  loadDatasourcePendingAction,\n  queriesImportedAction,\n  LoadDatasourceReadyPayload,\n  loadDatasourceReadyAction,\n  modifyQueriesAction,\n  queryTransactionFailureAction,\n  queryTransactionStartAction,\n  queryTransactionSuccessAction,\n  scanRangeAction,\n  scanStartAction,\n  setQueriesAction,\n  splitCloseAction,\n  splitOpenAction,\n  addQueryRowAction,\n  toggleGraphAction,\n  toggleLogsAction,\n  toggleTableAction,\n  ToggleGraphPayload,\n  ToggleLogsPayload,\n  ToggleTablePayload,\n  updateUIStateAction,\n  runQueriesAction,\n  testDataSourcePendingAction,\n  testDataSourceSuccessAction,\n  testDataSourceFailureAction,\n  loadExploreDatasources,\n} from './actionTypes';\nimport { ActionOf, ActionCreator } from 'app/core/redux/actionCreatorFactory';\nimport { LogsDedupStrategy } from 'app/core/logs_model';\nimport { parseTime } from '../TimePicker';\n\n/**\n * Updates UI state and save it to the URL\n */\nconst updateExploreUIState = (exploreId: ExploreId, uiStateFragment: Partial<ExploreUIState>): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateUIStateAction({ exploreId, ...uiStateFragment }));\n    dispatch(stateSave());\n  };\n};\n\n/**\n * Adds a query row after the row with the given index.\n */\nexport function addQueryRow(exploreId: ExploreId, index: number): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const query = generateEmptyQuery(getState().explore[exploreId].queries, index);\n\n    dispatch(addQueryRowAction({ exploreId, index, query }));\n  };\n}\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(exploreId: ExploreId, datasource: string): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    let newDataSourceInstance: DataSourceApi = null;\n\n    if (!datasource) {\n      newDataSourceInstance = await getDatasourceSrv().get();\n    } else {\n      newDataSourceInstance = await getDatasourceSrv().get(datasource);\n    }\n\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    const queries = getState().explore[exploreId].queries;\n\n    await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, newDataSourceInstance));\n\n    dispatch(updateDatasourceInstanceAction({ exploreId, datasourceInstance: newDataSourceInstance }));\n\n    await dispatch(loadDatasource(exploreId, newDataSourceInstance));\n\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Query change handler for the query row with the given index.\n * If `override` is reset the query modifications and run the queries. Use this to set queries via a link.\n */\nexport function changeQuery(\n  exploreId: ExploreId,\n  query: DataQuery,\n  index: number,\n  override: boolean\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Null query means reset\n    if (query === null) {\n      query = { ...generateEmptyQuery(getState().explore[exploreId].queries) };\n    }\n\n    dispatch(changeQueryAction({ exploreId, query, index, override }));\n    if (override) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Keep track of the Explore container size, in particular the width.\n * The width will be used to calculate graph intervals (number of datapoints).\n */\nexport function changeSize(\n  exploreId: ExploreId,\n  { height, width }: { height: number; width: number }\n): ActionOf<ChangeSizePayload> {\n  return changeSizeAction({ exploreId, height, width });\n}\n\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\nexport function changeTime(exploreId: ExploreId, range: TimeRange): ThunkResult<void> {\n  return dispatch => {\n    dispatch(changeTimeAction({ exploreId, range }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Clear all queries and results.\n */\nexport function clearQueries(exploreId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(scanStopAction({ exploreId }));\n    dispatch(clearQueriesAction({ exploreId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Loads all explore data sources and sets the chosen datasource.\n * If there are no datasources a missing datasource action is dispatched.\n */\nexport function loadExploreDatasourcesAndSetDatasource(\n  exploreId: ExploreId,\n  datasourceName: string\n): ThunkResult<void> {\n  return dispatch => {\n    const exploreDatasources: DataSourceSelectItem[] = getDatasourceSrv()\n      .getExternal()\n      .map((ds: any) => ({\n        value: ds.name,\n        name: ds.name,\n        meta: ds.meta,\n      }));\n\n    dispatch(loadExploreDatasources({ exploreId, exploreDatasources }));\n\n    if (exploreDatasources.length >= 1) {\n      dispatch(changeDatasource(exploreId, datasourceName));\n    } else {\n      dispatch(loadDatasourceMissingAction({ exploreId }));\n    }\n  };\n}\n\n/**\n * Initialize Explore state with state from the URL and the React component.\n * Call this only on components for with the Explore state has not been initialized.\n */\nexport function initializeExplore(\n  exploreId: ExploreId,\n  datasourceName: string,\n  queries: DataQuery[],\n  range: RawTimeRange,\n  containerWidth: number,\n  eventBridge: Emitter,\n  ui: ExploreUIState\n): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(loadExploreDatasourcesAndSetDatasource(exploreId, datasourceName));\n    dispatch(\n      initializeExploreAction({\n        exploreId,\n        containerWidth,\n        eventBridge,\n        queries,\n        range,\n        ui,\n      })\n    );\n  };\n}\n\n/**\n * Datasource loading was successfully completed.\n */\nexport const loadDatasourceReady = (\n  exploreId: ExploreId,\n  instance: DataSourceApi\n): ActionOf<LoadDatasourceReadyPayload> => {\n  const historyKey = `grafana.explore.history.${instance.meta.id}`;\n  const history = store.getObject(historyKey, []);\n  // Save last-used datasource\n  store.set(LAST_USED_DATASOURCE_KEY, instance.name);\n\n  return loadDatasourceReadyAction({\n    exploreId,\n    history,\n  });\n};\n\nexport function importQueries(\n  exploreId: ExploreId,\n  queries: DataQuery[],\n  sourceDataSource: DataSourceApi,\n  targetDataSource: DataSourceApi\n): ThunkResult<void> {\n  return async dispatch => {\n    if (!sourceDataSource) {\n      // explore not initialized\n      dispatch(queriesImportedAction({ exploreId, queries }));\n      return;\n    }\n\n    let importedQueries = queries;\n    // Check if queries can be imported from previously selected datasource\n    if (sourceDataSource.meta.id === targetDataSource.meta.id) {\n      // Keep same queries if same type of datasource\n      importedQueries = [...queries];\n    } else if (targetDataSource.importQueries) {\n      // Datasource-specific importers\n      importedQueries = await targetDataSource.importQueries(queries, sourceDataSource.meta);\n    } else {\n      // Default is blank queries\n      importedQueries = ensureQueries();\n    }\n\n    const nextQueries = importedQueries.map((q, i) => ({\n      ...q,\n      ...generateEmptyQuery(queries),\n    }));\n\n    dispatch(queriesImportedAction({ exploreId, queries: nextQueries }));\n  };\n}\n\n/**\n * Tests datasource.\n */\nexport const testDatasource = (exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> => {\n  return async dispatch => {\n    let datasourceError = null;\n\n    dispatch(testDataSourcePendingAction({ exploreId }));\n\n    try {\n      const testResult = await instance.testDatasource();\n      datasourceError = testResult.status === 'success' ? null : testResult.message;\n    } catch (error) {\n      datasourceError = (error && error.statusText) || 'Network error';\n    }\n\n    if (datasourceError) {\n      dispatch(testDataSourceFailureAction({ exploreId, error: datasourceError }));\n      return;\n    }\n\n    dispatch(testDataSourceSuccessAction({ exploreId }));\n  };\n};\n\n/**\n * Reconnects datasource when there is a connection failure.\n */\nexport const reconnectDatasource = (exploreId: ExploreId): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const instance = getState().explore[exploreId].datasourceInstance;\n    dispatch(changeDatasource(exploreId, instance.name));\n  };\n};\n\n/**\n * Main action to asynchronously load a datasource. Dispatches lots of smaller actions for feedback.\n */\nexport function loadDatasource(exploreId: ExploreId, instance: DataSourceApi): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const datasourceName = instance.name;\n\n    // Keep ID to track selection\n    dispatch(loadDatasourcePendingAction({ exploreId, requestedDatasourceName: datasourceName }));\n\n    await dispatch(testDatasource(exploreId, instance));\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    if (instance.init) {\n      instance.init();\n    }\n\n    if (datasourceName !== getState().explore[exploreId].requestedDatasourceName) {\n      // User already changed datasource again, discard results\n      return;\n    }\n\n    dispatch(loadDatasourceReady(exploreId, instance));\n  };\n}\n\n/**\n * Action to modify a query given a datasource-specific modifier action.\n * @param exploreId Explore area\n * @param modification Action object with a type, e.g., ADD_FILTER\n * @param index Optional query row index. If omitted, the modification is applied to all query rows.\n * @param modifier Function that executes the modification, typically `datasourceInstance.modifyQueries`.\n */\nexport function modifyQueries(\n  exploreId: ExploreId,\n  modification: QueryFixAction,\n  index: number,\n  modifier: any\n): ThunkResult<void> {\n  return dispatch => {\n    dispatch(modifyQueriesAction({ exploreId, modification, index, modifier }));\n    if (!modification.preventSubmit) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n/**\n * Mark a query transaction as failed with an error extracted from the query response.\n * The transaction will be marked as `done`.\n */\nexport function queryTransactionFailure(\n  exploreId: ExploreId,\n  transactionId: string,\n  response: any,\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, queryTransactions } = getState().explore[exploreId];\n    if (datasourceInstance.meta.id !== datasourceId || response.cancelled) {\n      // Navigated away, queries did not matter\n      return;\n    }\n\n    // Transaction might have been discarded\n    if (!queryTransactions.find(qt => qt.id === transactionId)) {\n      return;\n    }\n\n    console.error(response);\n\n    let error: string;\n    let errorDetails: string;\n    if (response.data) {\n      if (typeof response.data === 'string') {\n        error = response.data;\n      } else if (response.data.error) {\n        error = response.data.error;\n        if (response.data.response) {\n          errorDetails = response.data.response;\n        }\n      } else {\n        throw new Error('Could not handle error response');\n      }\n    } else if (response.message) {\n      error = response.message;\n    } else if (typeof response === 'string') {\n      error = response;\n    } else {\n      error = 'Unknown error during query transaction. Please check JS console logs.';\n    }\n\n    // Mark transactions as complete\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          error,\n          errorDetails,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    dispatch(queryTransactionFailureAction({ exploreId, queryTransactions: nextQueryTransactions }));\n  };\n}\n\n/**\n * Complete a query transaction, mark the transaction as `done` and store query state in URL.\n * If the transaction was started by a scanner, it keeps on scanning for more results.\n * Side-effect: the query is stored in localStorage.\n * @param exploreId Explore area\n * @param transactionId ID\n * @param result Response from `datasourceInstance.query()`\n * @param latency Duration between request and response\n * @param queries Queries from all query rows\n * @param datasourceId Origin datasource instance, used to discard results if current datasource is different\n */\nexport function queryTransactionSuccess(\n  exploreId: ExploreId,\n  transactionId: string,\n  result: any,\n  latency: number,\n  queries: DataQuery[],\n  datasourceId: string\n): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { datasourceInstance, history, queryTransactions, scanner, scanning } = getState().explore[exploreId];\n\n    // If datasource already changed, results do not matter\n    if (datasourceInstance.meta.id !== datasourceId) {\n      return;\n    }\n\n    // Transaction might have been discarded\n    const transaction = queryTransactions.find(qt => qt.id === transactionId);\n    if (!transaction) {\n      return;\n    }\n\n    // Get query hints\n    let hints: QueryHint[];\n    if (datasourceInstance.getQueryHints) {\n      hints = datasourceInstance.getQueryHints(transaction.query, result);\n    }\n\n    // Mark transactions as complete and attach result\n    const nextQueryTransactions = queryTransactions.map(qt => {\n      if (qt.id === transactionId) {\n        return {\n          ...qt,\n          hints,\n          latency,\n          result,\n          done: true,\n        };\n      }\n      return qt;\n    });\n\n    // Side-effect: Saving history in localstorage\n    const nextHistory = updateHistory(history, datasourceId, queries);\n\n    dispatch(\n      queryTransactionSuccessAction({\n        exploreId,\n        history: nextHistory,\n        queryTransactions: nextQueryTransactions,\n      })\n    );\n\n    // Keep scanning for results if this was the last scanning transaction\n    if (scanning) {\n      if (_.size(result) === 0) {\n        const other = nextQueryTransactions.find(qt => qt.scanning && !qt.done);\n        if (!other) {\n          const range = scanner();\n          dispatch(scanRangeAction({ exploreId, range }));\n        }\n      } else {\n        // We can stop scanning if we have a result\n        dispatch(scanStopAction({ exploreId }));\n      }\n    }\n  };\n}\n\n/**\n * Main action to run queries and dispatches sub-actions based on which result viewers are active\n */\nexport function runQueries(exploreId: ExploreId, ignoreUIState = false): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const {\n      datasourceInstance,\n      queries,\n      showingLogs,\n      showingGraph,\n      showingTable,\n      supportsGraph,\n      supportsLogs,\n      supportsTable,\n      datasourceError,\n      containerWidth,\n    } = getState().explore[exploreId];\n\n    if (datasourceError) {\n      // let's not run any queries if data source is in a faulty state\n      return;\n    }\n\n    if (!hasNonEmptyQuery(queries)) {\n      dispatch(clearQueriesAction({ exploreId }));\n      dispatch(stateSave()); // Remember to saves to state and update location\n      return;\n    }\n\n    // Some datasource's query builders allow per-query interval limits,\n    // but we're using the datasource interval limit for now\n    const interval = datasourceInstance.interval;\n\n    dispatch(runQueriesAction({ exploreId }));\n    // Keep table queries first since they need to return quickly\n    if ((ignoreUIState || showingTable) && supportsTable) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Table',\n          {\n            interval,\n            format: 'table',\n            instant: true,\n            valueWithRefId: true,\n          },\n          (data: any) => data[0]\n        )\n      );\n    }\n    if ((ignoreUIState || showingGraph) && supportsGraph) {\n      dispatch(\n        runQueriesForType(\n          exploreId,\n          'Graph',\n          {\n            interval,\n            format: 'time_series',\n            instant: false,\n            maxDataPoints: containerWidth,\n          },\n          makeTimeSeriesList\n        )\n      );\n    }\n    if ((ignoreUIState || showingLogs) && supportsLogs) {\n      dispatch(runQueriesForType(exploreId, 'Logs', { interval, format: 'logs' }));\n    }\n\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Helper action to build a query transaction object and handing the query to the datasource.\n * @param exploreId Explore area\n * @param resultType Result viewer that will be associated with this query result\n * @param queryOptions Query options as required by the datasource's `query()` function.\n * @param resultGetter Optional result extractor, e.g., if the result is a list and you only need the first element.\n */\nfunction runQueriesForType(\n  exploreId: ExploreId,\n  resultType: ResultType,\n  queryOptions: QueryOptions,\n  resultGetter?: any\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { datasourceInstance, eventBridge, queries, queryIntervals, range, scanning } = getState().explore[exploreId];\n    const datasourceId = datasourceInstance.meta.id;\n\n    // Run all queries concurrently\n    queries.forEach(async (query, rowIndex) => {\n      const transaction = buildQueryTransaction(\n        query,\n        rowIndex,\n        resultType,\n        queryOptions,\n        range,\n        queryIntervals,\n        scanning\n      );\n      dispatch(queryTransactionStartAction({ exploreId, resultType, rowIndex, transaction }));\n      try {\n        const now = Date.now();\n        const res = await datasourceInstance.query(transaction.options);\n        eventBridge.emit('data-received', res.data || []);\n        const latency = Date.now() - now;\n        const { queryTransactions } = getState().explore[exploreId];\n        const results = resultGetter ? resultGetter(res.data, transaction, queryTransactions) : res.data;\n        dispatch(queryTransactionSuccess(exploreId, transaction.id, results, latency, queries, datasourceId));\n      } catch (response) {\n        eventBridge.emit('data-error', response);\n        dispatch(queryTransactionFailure(exploreId, transaction.id, response, datasourceId));\n      }\n    });\n  };\n}\n\n/**\n * Start a scan for more results using the given scanner.\n * @param exploreId Explore area\n * @param scanner Function that a) returns a new time range and b) triggers a query run for the new range\n */\nexport function scanStart(exploreId: ExploreId, scanner: RangeScanner): ThunkResult<void> {\n  return dispatch => {\n    // Register the scanner\n    dispatch(scanStartAction({ exploreId, scanner }));\n    // Scanning must trigger query run, and return the new range\n    const range = scanner();\n    // Set the new range to be displayed\n    dispatch(scanRangeAction({ exploreId, range }));\n  };\n}\n\n/**\n * Reset queries to the given queries. Any modifications will be discarded.\n * Use this action for clicks on query examples. Triggers a query run.\n */\nexport function setQueries(exploreId: ExploreId, rawQueries: DataQuery[]): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Inject react keys into query objects\n    const queries = rawQueries.map(q => ({ ...q, ...generateEmptyQuery(getState().explore[exploreId].queries) }));\n    dispatch(setQueriesAction({ exploreId, queries }));\n    dispatch(runQueries(exploreId));\n  };\n}\n\n/**\n * Close the split view and save URL state.\n */\nexport function splitClose(itemId: ExploreId): ThunkResult<void> {\n  return dispatch => {\n    dispatch(splitCloseAction({ itemId }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Open the split view and copy the left state to be the right state.\n * The right state is automatically initialized.\n * The copy keeps all query modifications but wipes the query results.\n */\nexport function splitOpen(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    // Clone left state to become the right state\n    const leftState = getState().explore[ExploreId.left];\n    const queryState = getState().location.query[ExploreId.left] as string;\n    const urlState = parseUrlState(queryState);\n    const queryTransactions: QueryTransaction[] = [];\n    const itemState = {\n      ...leftState,\n      queryTransactions,\n      queries: leftState.queries.slice(),\n      exploreId: ExploreId.right,\n      urlState,\n    };\n    dispatch(splitOpenAction({ itemState }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Saves Explore state to URL using the `left` and `right` parameters.\n * If split view is not active, `right` will not be set.\n */\nexport function stateSave(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const { left, right, split } = getState().explore;\n    const urlStates: { [index: string]: string } = {};\n    const leftUrlState: ExploreUrlState = {\n      datasource: left.datasourceInstance.name,\n      queries: left.queries.map(clearQueryKeys),\n      range: left.range,\n      ui: {\n        showingGraph: left.showingGraph,\n        showingLogs: left.showingLogs,\n        showingTable: left.showingTable,\n        dedupStrategy: left.dedupStrategy,\n      },\n    };\n    urlStates.left = serializeStateToUrlParam(leftUrlState, true);\n    if (split) {\n      const rightUrlState: ExploreUrlState = {\n        datasource: right.datasourceInstance.name,\n        queries: right.queries.map(clearQueryKeys),\n        range: right.range,\n        ui: {\n          showingGraph: right.showingGraph,\n          showingLogs: right.showingLogs,\n          showingTable: right.showingTable,\n          dedupStrategy: right.dedupStrategy,\n        },\n      };\n\n      urlStates.right = serializeStateToUrlParam(rightUrlState, true);\n    }\n\n    dispatch(updateLocation({ query: urlStates }));\n  };\n}\n\n/**\n * Creates action to collapse graph/logs/table panel. When panel is collapsed,\n * queries won't be run\n */\nconst togglePanelActionCreator = (\n  actionCreator:\n    | ActionCreator<ToggleGraphPayload>\n    | ActionCreator<ToggleLogsPayload>\n    | ActionCreator<ToggleTablePayload>\n) => (exploreId: ExploreId, isPanelVisible: boolean): ThunkResult<void> => {\n  return dispatch => {\n    let uiFragmentStateUpdate: Partial<ExploreUIState>;\n    const shouldRunQueries = !isPanelVisible;\n\n    switch (actionCreator.type) {\n      case toggleGraphAction.type:\n        uiFragmentStateUpdate = { showingGraph: !isPanelVisible };\n        break;\n      case toggleLogsAction.type:\n        uiFragmentStateUpdate = { showingLogs: !isPanelVisible };\n        break;\n      case toggleTableAction.type:\n        uiFragmentStateUpdate = { showingTable: !isPanelVisible };\n        break;\n    }\n\n    dispatch(actionCreator({ exploreId }));\n    dispatch(updateExploreUIState(exploreId, uiFragmentStateUpdate));\n\n    if (shouldRunQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n};\n\n/**\n * Expand/collapse the graph result viewer. When collapsed, graph queries won't be run.\n */\nexport const toggleGraph = togglePanelActionCreator(toggleGraphAction);\n\n/**\n * Expand/collapse the logs result viewer. When collapsed, log queries won't be run.\n */\nexport const toggleLogs = togglePanelActionCreator(toggleLogsAction);\n\n/**\n * Expand/collapse the table result viewer. When collapsed, table queries won't be run.\n */\nexport const toggleTable = togglePanelActionCreator(toggleTableAction);\n\n/**\n * Change logs deduplication strategy and update URL.\n */\nexport const changeDedupStrategy = (exploreId: ExploreId, dedupStrategy: LogsDedupStrategy): ThunkResult<void> => {\n  return dispatch => {\n    dispatch(updateExploreUIState(exploreId, { dedupStrategy }));\n  };\n};\n\nexport function refreshExplore(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const itemState = getState().explore[exploreId];\n    if (!itemState.initialized) {\n      return;\n    }\n\n    const { urlState, update, containerWidth, eventBridge } = itemState;\n    const { datasource, queries, range, ui } = urlState;\n    const refreshQueries = queries.map(q => ({ ...q, ...generateEmptyQuery(itemState.queries) }));\n    const refreshRange = { from: parseTime(range.from), to: parseTime(range.to) };\n\n    // need to refresh datasource\n    if (update.datasource) {\n      const initialQueries = ensureQueries(queries);\n      const initialRange = { from: parseTime(range.from), to: parseTime(range.to) };\n      dispatch(initializeExplore(exploreId, datasource, initialQueries, initialRange, containerWidth, eventBridge, ui));\n      return;\n    }\n\n    if (update.range) {\n      dispatch(changeTimeAction({ exploreId, range: refreshRange as TimeRange }));\n    }\n\n    // need to refresh ui state\n    if (update.ui) {\n      dispatch(updateUIStateAction({ ...ui, exploreId }));\n    }\n\n    // need to refresh queries\n    if (update.queries) {\n      dispatch(setQueriesAction({ exploreId, queries: refreshQueries }));\n    }\n\n    // always run queries when refresh is needed\n    if (update.queries || update.ui || update.range) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n","import { createLodashMemoizedSelector } from 'app/core/utils/reselect';\nimport { ExploreItemState } from 'app/types';\nimport { filterLogLevels, dedupLogRows } from 'app/core/logs_model';\n\nexport const exploreItemUIStateSelector = (itemState: ExploreItemState) => {\n  const { showingGraph, showingLogs, showingTable, showingStartPage, dedupStrategy } = itemState;\n  return {\n    showingGraph,\n    showingLogs,\n    showingTable,\n    showingStartPage,\n    dedupStrategy,\n  };\n};\n\nconst logsSelector = (state: ExploreItemState) => state.logsResult;\nconst hiddenLogLevelsSelector = (state: ExploreItemState) => state.hiddenLogLevels;\nconst dedupStrategySelector = (state: ExploreItemState) => state.dedupStrategy;\nexport const deduplicatedLogsSelector = createLodashMemoizedSelector(\n  logsSelector,\n  hiddenLogLevelsSelector,\n  dedupStrategySelector,\n  (logs, hiddenLogLevels, dedupStrategy) => {\n    if (!logs) {\n      return null;\n    }\n    const filteredData = filterLogLevels(logs, new Set(hiddenLogLevels));\n    return dedupLogRows(filteredData, dedupStrategy);\n  }\n);\n","/**\n * Performs a shallow comparison of two sets with the same item type.\n */\nexport function equal<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a.size !== b.size) {\n    return false;\n  }\n  const it = a.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return true;\n    }\n    if (!b.has(value)) {\n      return false;\n    }\n  }\n}\n\n/**\n * Returns a new set with items in both sets using shallow comparison.\n */\nexport function intersect<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const result = new Set<T>();\n  const it = b.values();\n  while (true) {\n    const { value, done } = it.next();\n    if (done) {\n      return result;\n    }\n    if (a.has(value)) {\n      result.add(value);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AAAA;AAAA;;AAWA;AAVA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAAA;;AAWA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAKA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAwBA;AAjCA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAQA;;;;;;;;;;;;;;;;;;AC/BA;AAEA;AAAA;AACA;AAAA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAiCA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AAAA;AAQA;AAAA;AAoCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAtGA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAwEA;AAAA;AACA;AAcA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAeA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjVA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AA2BA;AAAA;AACA;AAAA;AAIA;;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAhBA;AAkBA;AAAA;AACA;AAWA;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAuBA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2BA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoDA;AA3JA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2CA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AAGA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACtQA;AACA;AACA;AAMA;AACA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAwBA;AAtBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAWA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;;AAkBA;AAhBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;;AAmBA;AAjBA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAOA;AA1BA;AACA;AACA;AAyBA;AAAA;AA5BA;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA6BA;AA3BA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AAEA;AAWA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AAUA;AAAA;AAAA;;AAuCA;AAtCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAAA;;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AC3EA;AAGA;AAUA;AAAA;AAAA;;AAkBA;AAjBA;AACA;AACA;AAcA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAmCA;AAjCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAQA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAwBA;;;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsFA;AAjIA;AACA;AACA;AA2CA;AACA;AAUA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAKA;AAKA;AAEA;AAGA;AACA;AASA;AAQA;AACA;AACA;AAEA;AAYA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnMA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AA8BA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAiJA;AAlNA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA8CA;AAAA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAIA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AAYA;;AAAA;AAAA;AAEA;;AAGA;AAMA;AAEA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrSA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AA5CA;AACA;AAkBA;AAEA;AAsBA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAUA;AAMA;AAIA;AASA;;;;;;;;;;;;;;;;;;;AC1CA;AASA;AAAA;AAAA;AAAA;AACA;;AAuBA;AArBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAEA;AACA;AACA;AAKA;AAYA;AAAA;AAAA;;AAuDA;AAnDA;;;;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsEA;AAvGA;AACA;AACA;AAiCA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAyBA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAMA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AAEA;AACA;AAaA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AC5BA;AAGA;AAEA;AACA;AACA;AAMA;AAAA;AAAA;;AAaA;AAZA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAMA;AAAA;AAAA;;AAWA;AAVA;AACA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgCA;AA9BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAVA;AAWA;AAEA;AAYA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAKA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAeA;AAbA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;;;;;;;;;AASA;AACA;AAAA;AAGA;AAAA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAgEA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAKA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAQA;AACA;AAQA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5TA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAOA;AAAA;AAAA;;AAyBA;AAxBA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAFA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAaA;AACA;AAaA;AASA;AAuCA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;;;;AACA;AAEA;AACA;;AAAA;;AAEA;;AAAA;;;AAGA;AACA;AAEA;;AAAA;AAEA;AAEA;;AAAA;AAEA;;;;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAAA;AASA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAMA;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA;AAEA;;AADA;AACA;;;AAEA;AACA;;;AAGA;AAKA;;;;AACA;AACA;AAEA;;AAEA;AACA;AACA;;;;;AACA;AAEA;;;;AAGA;;AAAA;AACA;;;;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AAEA;;AAEA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;;;;;AACA;AAEA;AACA;AAEA;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAAA;AAMA;;;;AACA;AACA;AAEA;AACA;;;;;AACA;AASA;;;;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;;;;;AAEA;;;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;AAGA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC10BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}